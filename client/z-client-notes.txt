import { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import { baseURL } from "../helpers/baseUrl";

export default function Detail() {
  const [monster, setMonster] = useState(null);
  const { id } = useParams();

  const navigate = useNavigate();

  const fetchMonsterById = async (id) => {
    try {
      const response = await baseURL.get(`/monster/${id}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("access_token")}`,
        },
      });
      console.log(response.data, "<<< fetchMonsterById");
      setMonster(response.data.data);
    } catch (err) {
      console.log(err, "<<< err fetchMonsterById");
    }
  };

  useEffect(() => {
    if (id) {
      fetchMonsterById(id);
    }
  }, [id]);

  if (!monster) {
    return null;
  }

  const handleUploadImage = (id) => {
    navigate(`/monster/${id}/update-img`);
  };

  return (
    <div className="container mx-auto mt-10 p-4">
      <div className="bg-gray-800 text-white rounded-lg shadow-lg overflow-hidden flex flex-col md:flex-row">
        <div className="md:w-1/3 flex justify-center items-center p-4">
          <img
            src={monster.imageUrl || "https://via.placeholder.com/150"}
            alt={monster.name}
            className="h-50 w-50  object-cover"
          />
        </div>

        <div className="md:w-2/3 p-4 flex flex-col">
          <div className="text-3xl font-bold text-center mb-4">
            {monster.name}
          </div>

          <div className="mb-2">
            <h5 className="text-lg">Type:</h5>
            <p className="text-gray-400">{monster.type}</p>
          </div>

          <div className="mb-2">
            <h5 className="text-lg">Species:</h5>
            <p className="text-gray-400">{monster.species}</p>
          </div>

          <div className="mb-4">
            <h5 className="text-lg">Description:</h5>
            <p className="text-gray-400">{monster.description}</p>
          </div>

          <button
            onClick={() => handleUploadImage(id)}
            className="mt-4 bg-blue-500 text-white font-bold py-2 px-4 rounded"
          >
            Upload Image
          </button>
        </div>
      </div>
    </div>
  );
}



Project Console: https://console.firebase.google.com/project/project-individual-indra/overview
Hosting URL: https://project-individual-indra.web.app

===============================================================================

Indra

Deployment:
client: https://project-individual-indra.web.app/
server: https://wolf.indragusti.my.id

Repository link:
server: https://github.com/indragusti/IP-RMT-53-Server
client: https://github.com/indragusti/IP-RMT-53-Client

Login account admin: 
email: admin@mail.com
password: admin1234

Login account user: 
email: hunter1@mail.com
password: hunter1

List feature yang berhasil implementasi:
- login-register & logout user
- update dan upload gambar ke cloudinary
- search, pagination, sort, filter di halaman home

List requirement yang dipenuhi:
- CRUD
- testing coverage: 53.01%
- google sign in
- api-docs
- implementasi redux di user favorite monster

List 3rd Party API yang digunakan: 
- https://mhw-db.com/monsters
- cloudinary
- GeminiAI

===============================================================================

client: https://mymovielist.khanz1.dev/
server: https://api.khanz1.dev/

repository link: 
server : https://github.com/khanz1/IP-RMT48/Server
client : https://github.com/khanz1/IP-RMT48/Client

Login Account (kalo ada)
email: assistance.xavier@gmail.com
password: 123456


List feature yang berhasil implementasi
Login dan register untuk user
Upgrade account dengan pembayaran menggunakan midtrans, dan setelah berhasil akan kirim email notifikasi
Handle pagination di home page menggunakan infinite scrolll
Ubah poster movie via upload

List requirement yang dipenuhi
CRUD cart
Testing coverage: 86.08% (lihat yang All files - Stmts)
Google sign in
Api docs sesuai dengan server
Implementasi redux untuk fetch user dan movies

Daftar 3rd party api yang digunakan
TMDB Api (https://developer.themoviedb.org/reference/intro/getting-started)
Midtrans API (https://docs.midtrans.com/)